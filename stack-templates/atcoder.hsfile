{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
license:             BSD3
author:              {{author-name}}{{^author-name}}Author name here{{/author-name}}
maintainer:          {{author-email}}{{^author-email}}example@example.com{{/author-email}}

source-dirs: .

dependencies:
- base >= 4.7 && < 5
# atcoder haskell resources
# https://github.com/haskell-jp/atcoder-haskell-resources/blob/master/Import.hs
- QuickCheck
- array
- attoparsec
- bytestring
- containers
- deepseq
- fgl
- hashable
- mtl
- parallel
- parsec
- primitive
- random
- template-haskell
- text
- tf-random
- transformers
- unordered-containers
- vector
- extra
- integer-logarithms
- heaps
- lens
- massiv
- mono-traversable
- mutable-containers
- mwc-random
- psqueues
- reflection
- repa
- unboxing-vector
- utility-ht
- vector-algorithms
- vector-th-unbox
# user specific package
- hspec
- main-tester
- directory

ghc-options:
# - -threaded
- -rtsopts
- -with-rtsopts=-N

executables:
  a:
    main:                Main.hs
    source-dirs:         a
  b:
    main:                Main.hs
    source-dirs:         b
  c:
    main:                Main.hs
    source-dirs:         c
  d:
    main:                Main.hs
    source-dirs:         d
  e:
    main:                Main.hs
    source-dirs:         e
  f:
    main:                Main.hs
    source-dirs:         f

{-# START_FILE test.sh #-}
#!/bin/bash
if [[ "$1" =~ ^(a|b|c|d|e|f)$ ]]; then
    contest=${PWD##*/}
    # ghcid --command "stack ghci $contest:exe:$1" --test Test.main
    # use ghci instead of ghcie, because current ghcie cannot use hDuplicate.
    # see: https://github.com/ndmitchell/ghcid/issues/274
    stack ghci $contest:exe:$1 --ghci-options "-e Test.main"
else
    echo "\"$1\" is not in the list"
fi

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE a/input1 #-}
{-# START_FILE a/input2 #-}
{-# START_FILE a/input3 #-}
{-# START_FILE a/expect1 #-}
{-# START_FILE a/expect2 #-}
{-# START_FILE a/expect3 #-}
{-# START_FILE a/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE a/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "a/input1"
      expect <- BS.readFile "a/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "a/input2"
      expect <- BS.readFile "a/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "a/input3"
      expect <- BS.readFile "a/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect

{-# START_FILE b/input1 #-}
{-# START_FILE b/input2 #-}
{-# START_FILE b/input3 #-}
{-# START_FILE b/expect1 #-}
{-# START_FILE b/expect2 #-}
{-# START_FILE b/expect3 #-}
{-# START_FILE b/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE b/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "b/input1"
      expect <- BS.readFile "b/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "b/input2"
      expect <- BS.readFile "b/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "b/input3"
      expect <- BS.readFile "b/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect

{-# START_FILE c/input1 #-}
{-# START_FILE c/input2 #-}
{-# START_FILE c/input3 #-}
{-# START_FILE c/expect1 #-}
{-# START_FILE c/expect2 #-}
{-# START_FILE c/expect3 #-}
{-# START_FILE c/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE c/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "c/input1"
      expect <- BS.readFile "c/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "c/input2"
      expect <- BS.readFile "c/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "c/input3"
      expect <- BS.readFile "c/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect

{-# START_FILE d/input1 #-}
{-# START_FILE d/input2 #-}
{-# START_FILE d/input3 #-}
{-# START_FILE d/expect1 #-}
{-# START_FILE d/expect2 #-}
{-# START_FILE d/expect3 #-}
{-# START_FILE d/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE d/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "d/input1"
      expect <- BS.readFile "d/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "d/input2"
      expect <- BS.readFile "d/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "d/input3"
      expect <- BS.readFile "d/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect

{-# START_FILE e/input1 #-}
{-# START_FILE e/input2 #-}
{-# START_FILE e/input3 #-}
{-# START_FILE e/expect1 #-}
{-# START_FILE e/expect2 #-}
{-# START_FILE e/expect3 #-}
{-# START_FILE e/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE e/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "e/input1"
      expect <- BS.readFile "e/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "e/input2"
      expect <- BS.readFile "e/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "e/input3"
      expect <- BS.readFile "e/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect

{-# START_FILE f/input1 #-}
{-# START_FILE f/input2 #-}
{-# START_FILE f/input3 #-}
{-# START_FILE f/expect1 #-}
{-# START_FILE f/expect2 #-}
{-# START_FILE f/expect3 #-}
{-# START_FILE f/Main.hs #-}
module Main where

main :: IO ()
main = do

{-# START_FILE f/Test.hs #-}
{- HLINT ignore "Redundant do" -}
module Test where

import qualified Main                          as M
import           Data.ByteString.Char8          ( ByteString )
import qualified Data.ByteString.Char8         as BS
import           Test.Hspec
import           Test.Main

captureIO :: IO () -> ByteString -> IO ByteString
captureIO f input = prStdout <$> captureProcessResult (withStdin input f)

main :: IO ()
main = hspec $ do
  describe "main" $ do
    it "input1" $ do
      input  <- BS.readFile "f/input1"
      expect <- BS.readFile "f/expect1"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input2" $ do
      input  <- BS.readFile "f/input2"
      expect <- BS.readFile "f/expect2"
      output <- captureIO M.main input
      output `shouldBe` expect

    it "input3" $ do
      input  <- BS.readFile "f/input3"
      expect <- BS.readFile "f/expect3"
      output <- captureIO M.main input
      output `shouldBe` expect
